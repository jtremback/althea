(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Graph = (function (undefined) {

  var extractKeys = function extractKeys(obj) {
    var keys = [],
        key;
    for (key in obj) {
      Object.prototype.hasOwnProperty.call(obj, key) && keys.push(key);
    }
    return keys;
  };

  var sorter = function sorter(a, b) {
    return parseFloat(a) - parseFloat(b);
  };

  var findPaths = function findPaths(map, start, end, infinity) {
    infinity = infinity || Infinity;

    var costs = {},
        open = { "0": [start] },
        predecessors = {},
        keys;

    var addToOpen = function addToOpen(cost, vertex) {
      var key = "" + cost;
      if (!open[key]) open[key] = [];
      open[key].push(vertex);
    };

    costs[start] = 0;

    while (open) {
      if (!(keys = extractKeys(open)).length) break;

      keys.sort(sorter);

      var key = keys[0],
          bucket = open[key],
          node = bucket.shift(),
          currentCost = parseFloat(key),
          adjacentNodes = map[node] || {};

      if (!bucket.length) delete open[key];

      for (var vertex in adjacentNodes) {
        if (Object.prototype.hasOwnProperty.call(adjacentNodes, vertex)) {
          var cost = adjacentNodes[vertex],
              totalCost = cost + currentCost,
              vertexCost = costs[vertex];

          if (vertexCost === undefined || vertexCost > totalCost) {
            costs[vertex] = totalCost;
            addToOpen(totalCost, vertex);
            predecessors[vertex] = node;
          }
        }
      }
    }

    if (costs[end] === undefined) {
      return null;
    } else {
      return predecessors;
    }
  };

  var extractShortest = function extractShortest(predecessors, end) {
    var nodes = [],
        u = end;

    while (u) {
      nodes.push(u);
      u = predecessors[u];
    }

    nodes.reverse();
    return nodes;
  };

  var findShortestPath = function findShortestPath(map, nodes) {
    var start = nodes.shift(),
        end,
        predecessors,
        path = [],
        shortest;

    while (nodes.length) {
      end = nodes.shift();
      predecessors = findPaths(map, start, end);

      if (predecessors) {
        shortest = extractShortest(predecessors, end);
        if (nodes.length) {
          path.push.apply(path, shortest.slice(0, -1));
        } else {
          return path.concat(shortest);
        }
      } else {
        return null;
      }

      start = end;
    }
  };

  var toArray = function toArray(list, offset) {
    try {
      return Array.prototype.slice.call(list, offset);
    } catch (e) {
      var a = [];
      for (var i = offset || 0, l = list.length; i < l; ++i) {
        a.push(list[i]);
      }
      return a;
    }
  };

  var Graph = function Graph(map) {
    this.map = map;
  };

  Graph.prototype.findShortestPath = function (start, end) {
    if (Object.prototype.toString.call(start) === "[object Array]") {
      return findShortestPath(this.map, start);
    } else if (arguments.length === 2) {
      return findShortestPath(this.map, [start, end]);
    } else {
      return findShortestPath(this.map, toArray(arguments));
    }
  };

  Graph.findShortestPath = function (map, start, end) {
    if (Object.prototype.toString.call(start) === "[object Array]") {
      return findShortestPath(map, start);
    } else if (arguments.length === 3) {
      return findShortestPath(map, [start, end]);
    } else {
      return findShortestPath(map, toArray(arguments, 1));
    }
  };

  return Graph;
})();

module.exports = Graph;

},{}],2:[function(require,module,exports){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Graph = _interopRequire(require("./djikstra.js"));

var nodes = {
  A: {
    peers: {
      C: { distance: 20 }
    },
    pings: {
      E: 3,
      G: 7
    }
  },
  B: {
    peers: {
      E: { distance: 25 },
      D: { distance: 8 } } },
  C: {
    peers: {
      A: { distance: 20 },
      D: { distance: 15 } } },
  D: {
    peers: {
      B: { distance: 8 },
      C: { distance: 15 },
      E: { distance: 13 },
      F: { distance: 11 } } },
  E: {
    peers: {
      B: { distance: 25 },
      D: { distance: 13 },
      F: { distance: 20 },
      G: { distance: 10 } } },
  F: {
    peers: {
      D: { distance: 11 },
      E: { distance: 20 },
      G: { distance: 6 } } },
  G: {
    peers: {
      E: { distance: 10 },
      F: { distance: 6 } } }
};

var blockchain = [{
  to: "A",
  amount: 100
}];

function prepMap(nodes) {
  var newNodes = {};
  for (var nodeId in nodes) {
    var node = nodes[nodeId];
    var newNode = newNodes[nodeId] = {};
    for (var peerId in node.peers) {
      newNode[peerId] = node.peers[peerId].distance;
    }
  }

  return newNodes;
}

function checkDistances(map) {
  for (var nodeId in map) {
    var node = map[nodeId];
    for (var peerId in node) {
      var distance = node[peerId];
      if (distance !== map[peerId][nodeId]) {
        throw new Error("mismatched node distances " + peerId + ", " + nodeId);
      }
    }
  }

  return map;
}

var graph = new Graph(checkDistances(prepMap(nodes)));

var Node = (function () {
  function Node(id, opts) {
    _classCallCheck(this, Node);

    this.id = id;
    this.peers = opts.peers;
    this.routes = opts.routes;
    this.pings = opts.pings;
    this.baseRate = opts.baseRate;

    this.stats = {
      forwardedTo: {}
    };
  }

  _createClass(Node, {
    recieve: {
      value: function recieve(message, peerFrom) {
        message = JSON.parse(message);
        if (message.header.destinationAddress === this.id) {
          console.log(this.id, "recieved", message, "via", peerFrom);
          this._pay(message);
        } else {
          // Forward along
          this._send(message, peerFrom);
        }
      }
    },
    _pay: {
      value: function _pay(message) {
        blockchain.push(message.header.payment);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = message.header.forwarders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var forwarderId = _step.value;

            blockchain.push({
              from: this.id,
              to: forwarderId,
              amount: message.header.payment.amount / message.header.forwarders.length
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    },
    _send: {
      value: function _send(message, peerFrom) {
        // Get peer for destinationAddress
        var peerTo = graph.findShortestPath(this.id, message.header.destinationAddress)[1];

        if (peerFrom) {
          // Then this is being forwarded for another node.
          console.log("forwarding message from " + peerFrom + " to " + peerTo);
          this._logForward(peerFrom, peerTo);
          message.header.forwarders.push(this.id);
        }

        // Send to peer
        nodes[peerTo].recieve(JSON.stringify(message), this.id);
      }
    },
    _logForward: {
      value: function _logForward(peerFrom, peerTo) {
        // Log forwarding stats
        if (!this.stats.forwardedTo[peerTo]) {
          this.stats.forwardedTo[peerTo] = {};
        }
        if (!this.stats.forwardedTo[peerTo][peerFrom]) {
          this.stats.forwardedTo[peerTo][peerFrom] = 0;
        }
        this.stats.forwardedTo[peerTo][peerFrom] = this.stats.forwardedTo[peerTo][peerFrom] + 1;
      }
    },
    pingPeers: {
      value: function pingPeers() {
        for (var id in this.pings) {
          for (var i = 0; i < this.pings[id]; i++) {
            this._send({
              header: {
                destinationAddress: id,
                sourceAddress: this.id,
                forwarders: [],
                payment: {
                  from: this.id,
                  to: id,
                  amount: 20
                }
              },
              body: "ping"
            });
          }
        }
      }
    },
    getStats: {
      value: function getStats() {
        return this.stats;
      }
    }
  });

  return Node;
})();

function makeNodes(nodes) {
  for (var id in nodes) {
    nodes[id] = new Node(id, nodes[id]);
  }
}

makeNodes(nodes);

for (var key in nodes) {
  nodes[key].pingPeers();
}

for (var key in nodes) {
  console.log(nodes[key].getStats());
}

console.log(blockchain);

// pings: {
//   A: 4,
//   G: 2
// }

// pings: {
//   D: 8,
//   B: 4
// }

// pings: {
//   C: 4,
//   G: 9
// }

// pings: {
//   F: 5,
//   A: 12
// }

// pings: {
//   B: 3,
//   D: 9
// }

// pings: {
//   B: 4,
//   C: 5
// }

//   A: {
//     B: 10
//   }

},{"./djikstra.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
