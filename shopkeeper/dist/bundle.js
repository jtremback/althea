(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

// This simulation consists of a small network of nodes, each node randomly
// pings other nodes in a fixed proportion. So for example, node B may ping
// node E 40% of the time, and node D 60% of the time. Some of the nodes are
// not directly connected, so a naive routing algorithm is used.
//
// The output, for each node, is a list of the node's peers, along with number
// of pings forwarded to other peers. For example, node E might
// have an output like this:
//
// Node E:
//   Peer B: 12 pings to D, 9 pings to G
//   Peer D: 5 pings to B, 9 pings to G
//   Peer G: 0 pings to D, 30 pings to B

var nodes = {
  A: {
    peers: {
      C: { cost: 0 }
    },
    routes: {
      A: null,
      B: "C",
      C: "C",
      D: "C",
      E: "C",
      F: "C",
      G: "C" },
    pings: {
      E: 3,
      F: 7
    }
  },
  B: {
    peers: {
      E: { cost: 0 },
      D: { cost: 0 } },
    routes: {
      A: "D",
      B: null,
      C: "D",
      D: "D",
      E: "E",
      F: "D",
      G: "E"
    },
    pings: {
      A: 4,
      G: 2
    }
  },
  C: {
    peers: {
      A: { cost: 0 },
      D: { cost: 0 } },
    routes: {
      A: "A",
      B: "D",
      C: null,
      D: "D",
      E: "D",
      F: "D",
      G: "G"
    },
    pings: {
      D: 8,
      B: 4
    }
  },
  D: {
    peers: {
      B: { cost: 0 },
      C: { cost: 0 },
      E: { cost: 0 },
      F: { cost: 0 } },
    routes: {
      A: "C",
      B: "B",
      C: "C",
      D: null,
      E: "E",
      F: "F",
      G: "F"
    },
    pings: {
      C: 4,
      G: 9
    }
  },
  E: {
    peers: {
      B: { cost: 0 },
      D: { cost: 0 },
      G: { cost: 0 } },
    routes: {
      A: "D",
      B: "B",
      C: "D",
      D: "D",
      E: null,
      F: "D",
      G: "G"
    },
    pings: {
      F: 5,
      A: 12
    }
  },
  F: {
    peers: {
      D: { cost: 0 },
      E: { cost: 0 },
      G: { cost: 0 } },
    routes: {
      A: "D",
      B: "D",
      C: "D",
      D: "D",
      E: "G",
      F: null,
      G: "G"
    },
    pings: {
      B: 3,
      D: 9
    }
  },
  G: {
    peers: {
      E: { cost: 0 },
      F: { cost: 0 } },
    routes: {
      A: "F",
      B: "E",
      C: "F",
      D: "F",
      E: "E",
      F: "F",
      G: null
    },
    pings: {
      B: 4,
      C: 5
    }
  }
};

var Node = (function () {
  function Node(id, opts) {
    _classCallCheck(this, Node);

    this.id = id;
    this.peers = opts.peers;
    this.routes = opts.routes;
    this.pings = opts.pings;
    this.stats = {
      forwardedTo: {}
    };
  }

  _createClass(Node, {
    recieve: {
      value: function recieve(message, peerFrom) {
        if (message.header.destinationAddress === this.id) {} else {
          // Forward along
          this.send(message, peerFrom);
        }
      }
    },
    send: {
      value: function send(message, peerFrom) {
        // Get peer for destinationAddress
        var peerTo = this.routes[message.header.destinationAddress];

        if (peerFrom) {
          console.log("forwarding message from " + peerFrom + " to " + peerTo);
          // Log forwarding stats
          if (!this.stats.forwardedTo[peerTo]) {
            this.stats.forwardedTo[peerTo] = {};
          }
          if (!this.stats.forwardedTo[peerTo][peerFrom]) {
            this.stats.forwardedTo[peerTo][peerFrom] = 0;
          }
          this.stats.forwardedTo[peerTo][peerFrom] = this.stats.forwardedTo[peerTo][peerFrom] + 1;
        }

        // Send to peer
        nodes[peerTo].recieve(message, this.id);
      }
    },
    pingPeers: {
      value: function pingPeers() {
        for (var id in this.pings) {
          for (var i = 0; i < this.pings[id]; i++) {
            this.send({
              header: {
                destinationAddress: id,
                sourceAddress: this.id
              },
              body: "ping"
            });
          }
        }
      }
    },
    getStats: {
      value: function getStats() {
        return this.stats;
      }
    }
  });

  return Node;
})();

function makeNodes(nodes) {
  for (var id in nodes) {
    nodes[id] = new Node(id, nodes[id]);
  }
}

makeNodes(nodes);

for (var key in nodes) {
  nodes[key].pingPeers();
}

for (var key in nodes) {
  console.log(nodes[key].getStats());
}

//   A: {
//     B: 10
//   }

// console.log(this.id, 'recieved', message.body, 'from', message.header.sourceAddress, 'via', peerFrom)

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
